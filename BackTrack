## 回溯法适用的问题
往往要找到一个问题的全部解的时候就需要使用回溯法。  
回溯法类似于一种遍历的方法，遍历所有的可能，找到符合条件的解。就是在解空间中找到所有的解。  
解空间可以想象为树，对树进行深度优先搜索。
## 解决问题的关键
- 解空间
- 如何让解空间更容易搜索
    - 使用约束函数，在扩展节点处剪去不满足约束的子树；
    - 使用限界函数，“剪去”不能达到最优解的子树。
## 回溯法解题步骤
1. 确定解空间
2. 找出适当的剪枝函数，约束函数和限界函数
3. 深度优先方式搜索解空间，并且在搜索过程中利用剪枝函数避免无效的搜索
    - 递归回溯
    - 迭代回溯
4. 利用限界函数避免移动到不可能产生解的子空间
## 算法框架
1. 递归回溯：
回溯法对解空间作深度优先搜索，因此，在一般情况下用递归方法实现回溯法。
```java
void backtracking (int t)
{
    if (t > n) {
       // 到达叶子结点，将结果输出
       output (x);
    }
    else {
       // 遍历结点t的所有子结点，即枚举t所有可能的路径   
      // f(n,t)=下界;g(n,t)=上界;
       for (int i = f(n,t); i <= g(n,t); i ++ ) {//
           x[t] = h[i];//满足界限函数和约束函数
           // 如果不满足剪枝条件，则继续遍历，进入下一层
           if (constraint (t) && bound (t)) 
              backtrack (t + 1);
       }
    }
}
```
t是递归深度；
n是深度控制，即解空间树的的高度；
可行性判断有两方面的内容：不满约束条件则剪去相应子树；若限界函数越界，也剪去相应子树；两者均满足则进入下一层；  

2. 迭代回溯
采用树的非递归深度优先遍历算法，可将回溯法表示为一个非递归迭代过程。
```java
// 针对N叉树的迭代回溯方法
void iterativeBacktrack ()
{
    int t = 1;
    while (t > 0) { //有路可走
       if (f(n,t) <= g(n,t)) {
           //  遍历结点t的所有子结点
           for (int i = f(n,t); i <= g(n,t); i ++) {
              x[t] = h(i);
              // 剪枝
              if (constraint(t) && bound(t)) {
                  // 找到问题的解，输出结果
                  if (solution(t)) {
                     output(x);
                  }
                  else // 未找到，向更深层次遍历
                     t ++;
              }
           }
       }
       else {
           t--;
       }
    }
}
```